<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fire = 1;
meleeFire = 1;
canMove = true;
moveSpeed = 3;
canFire = true;
grounded = true;
gunDir = 0;
gravity = 1;
gravity_direction = 270;
friction = 0.4;
recoil = 7;
burst = false;
burstAmmo = 0;
zoomed = false;

flashSys = part_system_create();
flashPart = part_type_create();

part_type_sprite(flashPart,spr_gun_flash,false,0,0);
part_type_life(flashPart,2,2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gunDir = point_direction(x,y,mouse_x,mouse_y);
if (canMove) {
    if(keyboard_check(ord("A"))) {
        if (place_free(x-moveSpeed-(sprite_width/2),y)) {
            hspeed = -moveSpeed;
        }
    }
    if(keyboard_check(ord("D"))) {
        if (place_free(x+moveSpeed+(sprite_width/2),y)) {
            hspeed = moveSpeed;
        }
    }
    if(grounded) {
        if(keyboard_check_pressed(vk_space)) {
            vspeed = -15;
        }
    }
    if (keyboard_check_pressed(ord("G"))) {
        if (!instance_exists(obj_grenade)) {
            var nade = instance_create(x,y,obj_grenade);
            nade.fuseTime = 180;
            nade.radius = 128;
            nade.damage = 300;
            nade.direction = gunDir;
            nade.speed = 5;
        }
    }
}
if (global.currentWeapon == 5) {
    if (mouse_check_button_pressed(mb_right)) {
        zoomed = !zoomed;
    }
}
image_yscale = sign(mouse_x-x);
if(!place_empty(x,y+16)) {grounded = true;} else {grounded = false;}
if (speed == 0) {
    if (recoil &gt; 2) {
        recoil -= 0.75;
    }
}
else {
    if (recoil &lt; getWeaponData(weaponData.recoilMax)) {
        recoil += getWeaponData(weaponData.recoilClimb)/10;
    }
    else {
        recoil -= 0.75;
    }
}
if (burst &amp;&amp; global.currentWeapon == 2) {
    fireWeapon(true);
}
else if(burstAmmo == 0) {
    fireWeapon(false);
}
if (fire &lt; 1) {fire++;}
if (meleeFire &lt; 1) {meleeFire++;}
if (!zoomed) {
    view_xview[0] = x-(view_wview[0]/2)+(mouse_x-x)/2;
    view_yview[0] = y-(view_hview[0]/2)+(mouse_y-y)/2;
    view_wview[0] = var_wipe(view_wview[0],640,100,0.2,0);
    view_hview[0] = var_wipe(view_hview[0],480,100,0.2,0);
}
else {
    if (mouse_x &gt; view_wview[0]+view_xview[0]-64) {view_xview[0] += 10;}
    if (mouse_x &lt; view_xview[0]+64) {view_xview[0] -= 10;}
    if (mouse_y &gt; view_hview[0]+view_yview[0]-64) {view_yview[0] += 10;}
    if (mouse_y &lt; view_yview[0]+64) {view_yview[0] -= 10;}
    view_wview[0] = var_wipe(view_wview[0],320,100,0.2,0);
    view_hview[0] = var_wipe(view_hview[0],240,100,0.2,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ground">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(direction,12);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drawCrosshair(recoil);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
var xx, yy, angle;
angle = gunDir+(fire-1)*-image_yscale*min(5,getWeaponData(weaponData.recoilClimb))/4;
xx = x+lengthdir_x(max(-3,fire*getWeaponData(weaponData.recoilClimb)/2),angle);
yy = y+lengthdir_y(max(-3,fire*getWeaponData(weaponData.recoilClimb)/2),angle);
draw_sprite_ext(spr_gun,global.currentWeapon,xx,yy,1,image_yscale,angle,white,1);
if (getWeaponData(weaponData.suppressor)) {
    var dir, dist, adjust;
    adjust = 0;
    if (image_yscale == -1) {
        adjust = -global.gunFlashCoordY[global.currentWeapon]*2;
    }
    dir = point_direction(x,y,x+global.gunFlashCoordX[global.currentWeapon],y+global.gunFlashCoordY[global.currentWeapon]+adjust);
    dist = point_distance(x,y,x+global.gunFlashCoordX[global.currentWeapon],y+global.gunFlashCoordY[global.currentWeapon]+adjust);
    
    xx = x+lengthdir_x(max(-3,fire*getWeaponData(weaponData.recoilClimb)/2)+dist,angle+dir);
    yy = y+lengthdir_y(max(-3,fire*getWeaponData(weaponData.recoilClimb)/2)+dist,angle+dir);
    draw_sprite_ext(spr_suppressor,0,xx,yy,1,image_yscale,angle,white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
